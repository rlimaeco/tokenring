import javax.swing.*;
import java.io.IOException;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 *
 * @author Rafael Lima, rafaelslima@unifei.edu.br
 */
public class TokenClientView extends javax.swing.JFrame {

    String port;
    boolean requestToken = false;
    TokenClient tokenClient;

    /**
     * Creates new form TokenClientView
     */
    public TokenClientView(TokenClient cliente) {
        tokenClient = cliente;
        initComponents();
//        try {
//            System.out.print("\n[Cliente] Iniciando conexão com servidor...\n");
//
//            startGUI(clienteId, this);
////            System.out.print("[Cliente] ID Cliente: " + tokenClient.clienteId);
//        }
//        catch (IOException err){
//            System.out.print(err.toString());
//        }

    }

    private void setPort(String port) {
        this.port = port;
    }

    public void startToken(){
        try {

            // TODO add your handling code here:

            System.out.println("\n[Cliente] Iniciando Token");
            Socket clntSock2 = new Socket("localhost", tokenClient.sendPort);
            PrintStream ps = new PrintStream(clntSock2.getOutputStream());
            ps.println("token");
            clntSock2.close();
        } catch (IOException ex) {
            Logger.getLogger(TokenClientView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        JFrame frame = new JFrame("TokenClientView");

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cliente " + tokenClient.clienteId);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Pedir Acesso");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Liberar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(70, Short.MAX_VALUE))
        );

    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        requestToken = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            requestToken = false;
            jTextArea1.setEditable(false);
            System.out.println("Acesso Liberado");
            Socket clntSock2 = new Socket("localhost", tokenClient.sendPort);
            PrintStream ps = new PrintStream(clntSock2.getOutputStream());
            ps.println("token");
            clntSock2.close();
        } catch (IOException ex) {
            Logger.getLogger(TokenClientView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void start() {
        JFrame frame = new JFrame("TokenClientView");

        frame.setContentPane(getContentPane());
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

        new Thread() {
            public void run() {
                try {
                    startListen();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    public void startListen() throws IOException {

        Scanner in;
        PrintStream ps;

        startToken();

        try {

            ServerSocket servSock = new ServerSocket(tokenClient.listenPort);
            for (;;) { // Run forever, accpeting and servicing connections

                Socket clntSock = servSock.accept();

                in = new Scanner(clntSock.getInputStream());

                if (in.nextLine().compareTo("token") == 0) {
                    if (requestToken) {
                        System.out.println("[Cliente] Acesso Requisitado");
                        jTextArea1.setEditable(true);
                    } else {
                        try {
                            System.out.println("[Cliente] Acesso não Requisitado");
                            Thread.sleep(2000);
                            Socket clntSock2 = new Socket("localhost", tokenClient.sendPort);
                            ps = new PrintStream(clntSock2.getOutputStream());
                            ps.println("token");
                            ps.close();
                            clntSock2.close();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(TokenClientView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

                clntSock.close();

            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        /*ServerSocket ss = new ServerSocket(Integer.parseInt(c.port));
         while (true) {
         // System.out.println("estouAqui1");
         Socket s = ss.accept();
         // System.out.println("estouAqui");
         in = new Scanner(s.getInputStream());
         ps = new PrintStream(s.getOutputStream());
         String message = in.nextLine();
         //System.out.println(message);
         if (message.compareTo("tokenRequest") == 0) {
         if (c.requestToken == true) {
         c.jTextArea1.setEditable(true);

         }
         }

         try {
         System.out.println("Tokem preso em cliente de porta: " + c.port);
         while (c.requestToken == true) {
         Thread.sleep(200);
         }
         c.jTextArea1.setEditable(false);
         } catch (InterruptedException ex) {
         Logger.getLogger(Cliente3.class.getName()).log(Level.SEVERE, null, ex);
         }
         System.out.println("Tokem liberado em cliente de porta: " + c.port);
         ps.println("tokenReleased");
         s.close();
         }*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
